# -*- coding: utf-8 -*-
"""removeDataFromWord.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XVKsq2GWNG_Sc_td1mBSkavGe6a7Pf1X
"""

#!pip install python-docx
#!pip install regex

import docx
import spacy
import re
import pandas as pd


# Load the 'en_core_web_sm' model for NLP
nlp = spacy.load('en_core_web_sm')

def remove_personal_data(filepath):
    # Load the Word document
    doc = docx.Document(filepath)
    """  print(doc.paragraphs[1].text)
    doc.paragraphs[1].clear()  # Clear the first paragraph
    doc.save('test.docx') """

    first_word = None
    i = 0
    while i < len(doc.paragraphs) and not first_word:
        paragraph = doc.paragraphs[i]
        if len(paragraph.text.strip()) > 0:
            words = paragraph.text.strip().split()
            for word in words:
                if len(word.strip()) > 0:
                    first_word = word
                    break
        i += 1
    # print first word in docx
    # print(paragraph.text)

    # Define regular expressions for phone numbers, email addresses, URLs, and addresses
    phone_regex = re.compile(r"(\+)?([0-9]{1,3})?( )?(\([0-9]{1,3}\))?( )?[(\d+((\-\d+)+)]{10,15}")
    email_regex = re.compile(r'^[a-zA-Z]+(?:(?:_[a-zA-Z0-9]+)+\.[A-Za-z0-9]+|\.[a-zA-Z][a-zA-Z0-9]*)?@(?:[a-zA-Z0-9]+\.)*[a-zA-Z0-9]{2,}$')
    url_regex = re.compile(r'http://\S+|https://\S+')
    address_regex = re.compile(r'\d+ [\w\s]+, [\w\s]+, [\w\s]+')
    fullName_regex = re.compile(paragraph.text)
    tableData = []
    # for table in doc.tables:
    #     # Loop through each row in the table
    #     for row in table.rows:
    #         # Loop through each cell in the row
    #         for cell in row.cells:
    #             # Parse the cell text using the 'en_core_web_sm' model

    #             parsed_cell = nlp(cell.text)
    #             tableData.append(parsed_cell.text)

    # # Get the first table in the document
    # table = doc.tables[0]
    # # Get the first cell in the first row of the table
    # cell = table.cell(0, 2)
    # # Check if the cell text contains the text to remove
    # if '053-548-72-66' in cell.text:
    #     # Remove the text from the cell text
    #     new_text = cell.text.replace('053-548-72-66', '****')

    #     # Replace the cell text with the modified text
    #     cell.text = new_text

    # Loop through each paragraph in the document
    for para in doc.paragraphs:
        # Parse the paragraph using the 'en_core_web_sm' model

        parsed_para = nlp(para.text)
        # print(parsed_para)
        # Loop through each entity in the parsed paragraph
        for ent in parsed_para.ents:
            # Check if the entity is a phone number, email address, URL, or address
            if ent.label_ == 'PHONE':
                # Replace the phone number with asterisks in the parsed paragraph
                parsed_para = parsed_para[:ent.start_char] + \
                    '*' * len(ent.text) + parsed_para[ent.end_char:]
            elif ent.label_ == 'Email:':
                # Replace the email address with asterisks in the parsed paragraph
                parsed_para = parsed_para[:ent.start_char] + \
                    '*' * len(ent.text) + parsed_para[ent.end_char:]
            elif ent.label_ == 'URL':
                # Replace the URL with asterisks in the parsed paragraph
                parsed_para = parsed_para[:ent.start_char] + \
                    '*' * len(ent.text) + parsed_para[ent.end_char:]
            elif ent.label_ == 'ADDRESS':
                # Replace the address with asterisks in the parsed paragraph
                parsed_para = parsed_para[:ent.start_char] + \
                    '*' * len(ent.text) + parsed_para[ent.end_char:]

        # Update the text of the original paragraph with the modified text from the parsed paragraph
        para.text = parsed_para.text
        if fullName_regex.search(para.text):
            para.text = fullName_regex.sub(
                '*' * len(fullName_regex.search(para.text).group()), para.text)
        # Check if the paragraph contains a phone number, email address, URL, or address using regular expressions
        if phone_regex.search(para.text):
            # Replace the phone number with asterisks
            para.text = phone_regex.sub('*' * 10, para.text)
        if email_regex.search(para.text):

            # Replace the email address with asterisks
            para.text = email_regex.sub(
                '*' * len(email_regex.search(para.text).group()), para.text)
        if url_regex.search(para.text):
            # Replace the URL with asterisks
            para.text = url_regex.sub(
                '*' * len(url_regex.search(para.text).group()), para.text)
        if address_regex.search(para.text):
            # Replace the address with asterisks
            para.text = address_regex.sub(
                '*' * len(address_regex.search(para.text).group()), para.text)
    # Save the modified document
    doc.save('modified_cv.docx')

# Call the function with the file path of the CV
remove_personal_data('summarization-resume-vacancy-matching/docx_after_preprocessing/docx/file name.docx')

# (phone|Tel|Phone|Mobile phone)(:)*( )* 

# (email|Email|E-mail)(:)*( )* 

# (linkedIn|Github)(:)*( )*

email_regex1 =r'(email|Email|E-mail)(:)*( )*[A-Za-z0-9]*.*@[A-Za-z]*\.?[A-Za-z0-9]*'
email_regex2 = r'[A-Za-z0-9]*.*@[A-Za-z]*\.?[A-Za-z0-9]*'
date_regex1 =r"\d{2}.\d{2}.\d{4}"
birth_redex1 =r"Birthday(:)*( )*(\d{4}|(\d{2}.\d{2}.\d{4}))|Date of birth(:)*( )*(\d{2}.\d{2}.\d{4})"
year_redex1 = r"\d{4}"
phone_regex1 = r"(phone|Tel|Phone|Mobile phone)(:)*( )*(((\+)?([0-9]{1,3})?( )?(\([0-9]{1,3}\))?( )?[(\d+((\-\d+)+)]{10,15})|(\d{3} \d{3} \d{2} \d{2}))"
phone_regex2 = r"((\+)?([0-9]{1,3})?( )?(\([0-9]{1,3}\))?( )?[(\d+((\-\d+)+)]{10,15})|(\d{3} \d{3} \d{2} \d{2})"
url_regex1 = r'(Linkedln|linkedIn|Github)(:)*( )*http(s)*://\S+|https://\S+' 
url_regex2 = r'http://\S+|https://\S+'
age_regex1 = r'Age:( )*\d{2} y.o.'
city_regex1 = r'(City of Residence|Residence|location)(:)*( )*'
citis_df = pd.read_csv('citis.csv')
citis_names = citis_df['city'].values.tolist()
citis_names.extend(['Rishon LeZion', 'Herzliya','Tel Aviv', 'Tel-Aviv','Beer Sheva','Hod-Hasharon', 'Israel', 'Area', 'Petah Tikva'])


doc = docx.Document('summarization-resume-vacancy-matching/docx_after_preprocessing/docx/file name.docx');
for table in doc.tables:
  # Loop through each row in the table
    for row in table.rows:
      # Loop through each cell in the row
        for cell in row.cells:
          cell.text = re.sub(phone_regex1, '', cell.text).replace('\n', ' ') 
          cell.text = re.sub(phone_regex2, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(email_regex1, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(email_regex2, '', cell.text).replace('\n', ' ') 
          cell.text = re.sub(url_regex1, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(url_regex2, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(age_regex1, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(birth_redex1, '', cell.text).replace('\n', ' ')
          cell.text = re.sub(date_regex1, '', cell.text).replace('\n', ' ') 
          cell.text = re.sub(year_redex1, '', cell.text).replace('\n', ' ')
          for i in citis_names:
            cell.text = re.sub(city_regex1+i, '', cell.text).replace('\n', ' ');
            cell.text = re.sub(i, '', cell.text).replace('\n', ' ');
          print(cell.text)    
# Save the modified document
#doc.save('modified_cell6_cv.docx')


for para in doc.paragraphs:
  parsed_para = nlp(para.text)
  para.text = parsed_para.text
  para.text = re.sub(phone_regex1, '', para.text).replace('\n', ' ') 
  para.text = re.sub(phone_regex2, '', para.text).replace('\n', ' ')
  para.text = re.sub(email_regex1, '', para.text).replace('\n', ' ')
  para.text = re.sub(url_regex1, '', para.text).replace('\n', ' ')
  para.text = re.sub(age_regex1, '', para.text).replace('\n', ' ')
  para.text = re.sub(birth_redex1, '', para.text).replace('\n', ' ')
  para.text = re.sub(date_regex1, '', para.text).replace('\n', ' ') 
  #para.text = re.sub(year_redex1, '', para.text).replace('\n', ' ')
  for i in citis_names:
    para.text = re.sub(city_regex1+i, '', para.text).replace('\n', ' ');
    para.text = re.sub(i, '', para.text).replace('\n', ' ');
  print(para.text)
# Save the modified document
doc.save('modified_cell1_cv.docx')